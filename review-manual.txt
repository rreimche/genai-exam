I. Introduction.

Recently, advancements in the field of natural language language processing using large language models has experienced substantial advancements, allowing application not possible before, also in the area of text to text generation -- a model receives textual input and produces output that, on multiple benchmarks is close to human performance for the same tasks. This has allowed multi-agent systems to use LLMs as key component for agent design, allowing agentic systems to emulate humanlike information processing, communication and decision taking. One of the known applications of LLMs is software code generation and multiple researchers have recently studied the topic of emulation of software development process using LLM-based multi-agent systems. Such engineering process transcends code generation task by involving complex activities performed by multiple roles of interconnecting actors: requirements engineering, project architecture, project planning and management, generation of multiple heterogeneous software artifacts and quality assurance. Multiple software project paradigms are used in industry, waterfall and agile beign ones of the most common. Moreover, such process in industry can be adapted per case, omitting some and adding other activities, roles and communication rules. In this review we look at 6 recent papers on the topic of LLM-based multi-agent systems for end-to-end software development, that is, full cycle software development with requirements as input and executable system as output. We also review critically these contributions in the field and devise current state-of-the-art and future study possibilities.

In the next section, II, we write on our literature selection process. After that, in section III, we summarize the works and in section IV we drive conclusions and future research topics.

II. Literature selection

We were interested in multi-agent LLM-based systems for end-to-end software development -- such frameworks, that, given software requirements, emulate real world software development process and deliver a working application. Such software process  may include not only coding, but also other software process activities, such as refinement of requirements, project management, creation of of interconnected files, quality assurance and other activities. 

We searched on Google Scholar\footnote{https://scholar.google.com/}, Arxiv, Katalog+\footnote{https://hbz-rptu.primo.exlibrisgroup.com/discovery/search?vid=49HBZ\_RTU:RPTU} and also DBLP\footnote{https://dblp.org}. We used the following search terms: multi agent, llm, software development. In the case where search engines allowed that, we searched in titles and abstracts. We have also limited the year with which the papers were dated with the timeframe of 2020 to 2024, where the search engines have allowed that. The searched resulted in a multitude of papers of which only a small amount falls into our area of interest. 

\cite{he2024llm}, present in the results of multiple search databases, have caught our attention. This work, dated end 2024, reviews literature in LLM-based multi-agent systems for software engineering. Among other reviewed topics, it also write on multiple frameworks that relate to our interest. We used some of them for this work and also include work that was not reviewed in this article.


The total amount of candidate papers was higher than the required 6 and we have used the following criteria to chose:

\begin{itemize}
	
	\item As stated above, all selected papers must be in the field of multi-agent llm-based frameworks for end-to-end software development 	 
	\item No work should have used any of the frameworks that other selected papers have contributed as a component. This is motivated by our interest in different and comparable frameworks.
	\item Every work should include evaluation using at least one publicly available benchmark. Best case: all the papers use the same benchmarks to allow comparison of their efficiency.
	\item Selected papers must cover at least 2 software development process paradigms: waterfall and agile.
	\item All papers must be available on Arxiv to allow easy downloading by agents.
\end{itemize}

Application of this criteria has still left some freedom of choice and we have arbitrarily selected the following frameworks:


\begin{enumerate}
	\item MetaGPT \cite{hong2024metagptmetaprogrammingmultiagent}  (waterfall)
	\item ChatDev \cite{qian2024chatdevcommunicativeagentssoftware} (waterfall)
	\item CodePori \cite{rasheed2024codeporilargescaleautonomoussoftware} (waterfall) 
	\item AgileGen \cite{zhang2024empoweringagilebasedgenerativesoftware} (agile)
	\item AgileCoder \cite{nguyen2024agilecoderdynamiccollaborativeagents} (agile)
	\item EvoMAC \cite{hu2024selfevolvingmultiagentcollaborationnetworks} (dynamic process)
\end{enumerate}

At least one of the first two, MetaGPT and ChatDev, is used in other selected works as a comparison competitor, this has motivated these two choices. AgileGen and AgileCoder were the only frameworks for agile software process that we have found. We have included EvoMAC because it adopts a method similar to backpropagation from the realm of neural network training to update the development process so that the set of agents used and the topology of their communication may be changed multiple times during one run automatically.


Some of the papers are preprints, but include interesting contributions and since we are not writing this literature review for publication but only for examination and testing of our system, we consider this acceptable.

conclusion:

- though the frameworks allow boilerplating, if they can build an almost production ready system using complex real world requirements is still unclear and cen be studied in future
